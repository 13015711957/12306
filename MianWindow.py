# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '12306.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import datetime
from dateutil.relativedelta import relativedelta
from get_stations import *

from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from queryAPI import *
from PyQt5.QtCore import QDate

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1680, 800)
        MainWindow.setWindowOpacity(0.95)
        # 禁止最大化按钮
        MainWindow.setWindowFlags(QtCore.Qt.WindowMinimizeButtonHint)
        MainWindow.setWindowFlag(QtCore.Qt.WindowCloseButtonHint)
        # 禁止拉伸窗口大小
        MainWindow.setFixedSize(MainWindow.width(), MainWindow.height())
        edit_style = '''
                QLineEdit{
                    border:1px solid gray;
                    width:100px;
                    border-radius:10px;
                    padding:2px 4px;
                    background-color: rgba(255, 255, 255,180);
                    font:12pt '黑体';
                }
                '''
        button_style='''
                QPushButton{
                    border-image: url(img/search.png)
                }
        '''
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget.setStyleSheet("QWidget { background-color: rgba(255, 255, 255,255);}")
        #查询按钮
        self.search = QtWidgets.QPushButton(self.centralwidget)
        self.search.setGeometry(QtCore.QRect(1050, 5, 150, 50))
        self.search.setObjectName("search")
        self.search.setCursor(QCursor(Qt.PointingHandCursor))
        self.search.setStyleSheet(button_style)

        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(10, 10, 1000, 41))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(12)
        self.label = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.label.setObjectName("label")
        self.label.setFont(font)
        self.horizontalLayout_2.addWidget(self.label)
        #出发站
        self.from_station = QtWidgets.QLineEdit(self.horizontalLayoutWidget_2)
        self.from_station.setObjectName("from_station")
        self.from_station.setStyleSheet(edit_style)
        self.horizontalLayout_2.addWidget(self.from_station)

        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        #切换按钮
        self.replace=QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.replace.setObjectName("replace")
        self.replace.setFixedSize(40,40)
        self.replace.setStyleSheet("QPushButton{border-image: url(img/replace.png)}")
        self.replace.setCursor(QCursor(Qt.PointingHandCursor))

        self.horizontalLayout_2.addWidget(self.replace)
        self.label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.label_2.setObjectName("label_2")
        self.label_2.setFont(font)
        self.horizontalLayout_3.addWidget(self.label_2)
        #到达站
        self.to_station = QtWidgets.QLineEdit(self.horizontalLayoutWidget_2)
        self.to_station.setObjectName("to_station")
        self.to_station.setStyleSheet(edit_style)
        self.horizontalLayout_3.addWidget(self.to_station)

        self.horizontalLayout_2.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")

        self.label_3 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.label_3.setObjectName("label_3")
        self.label_3.setFont(font)
        self.horizontalLayout_4.addWidget(self.label_3)
        #日期
        self.date = QtWidgets.QDateEdit(self.horizontalLayoutWidget_2)
        self.date.setDisplayFormat("yyyy-MM-dd")
        min = datetime.datetime.now().date()
        max = datetime.date.today() - relativedelta(days=-29)
        self.date.setDateRange(min,max)
        self.date.setObjectName("date")
        self.date.setCalendarPopup(True)
        self.date.setStyleSheet("QDateEdit{ font:12pt '黑体'; border-radius:10px;background-color: rgba(255, 255, 255,180);}")
        self.horizontalLayout_4.addWidget(self.date)
        self.horizontalLayout_2.addLayout(self.horizontalLayout_4)

        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(10, 65, 600, 35))
        self.label_5.setObjectName("label_5")
        self.label_5.setFont(font)

        self.all = QtWidgets.QPushButton(self.centralwidget)
        self.all.setObjectName("all")
        self.all.setGeometry(QtCore.QRect(140, 65, 35, 35))
        self.all.setStyleSheet("QPushButton{border-image: url(img/all.png)}")
        self.all.setCursor(QCursor(Qt.PointingHandCursor))

        self.checkBox_G = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_G.setGeometry(QtCore.QRect(200, 73, 100, 20))
        self.checkBox_G.setObjectName("checkBox_G")
        self.checkBox_G.setFont(font)
        self.checkBox_D = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_D.setGeometry(QtCore.QRect(380, 73, 100, 20))
        self.checkBox_D.setObjectName("checkBox_D")
        self.checkBox_D.setFont(font)
        self.checkBox_Z = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_Z.setGeometry(QtCore.QRect(540, 73, 100, 20))
        self.checkBox_Z.setObjectName("checkBox_Z")
        self.checkBox_Z.setFont(font)
        self.checkBox_T = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_T.setGeometry(QtCore.QRect(700, 73, 100, 20))
        self.checkBox_T.setObjectName("checkBox_T")
        self.checkBox_T.setFont(font)
        self.checkBox_K = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_K.setGeometry(QtCore.QRect(860, 73, 100, 20))
        self.checkBox_K.setObjectName("checkBox_K")
        self.checkBox_K.setFont(font)

        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(10, 105, 600, 35))
        self.label_4.setObjectName("label_4")
        self.label_4.setFont(font)
        #返回表
        self.tableWidget = QtWidgets.QTableView(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(5, 140, 1680, 800))
        self.tableWidget.setObjectName("tableWidget")
        self.model = QStandardItemModel()  # 创建存储数据的模式
        # 根据空间自动改变列宽度并且不可修改列宽度
        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        # 设置表头不可见
        head = ['车次', '出发站', '到达站', '出发时间', '到达时间', '历时', '商务座\n特等座', '一等座', '二等座', '高级软卧', '软卧', '动卧', '硬卧', '软座',
                '硬座', '无座']
        self.model.setHorizontalHeaderLabels(head)
        self.tableWidget.horizontalHeader().setStyleSheet("QHeaderView::section {font:12pt '黑体';color:white;background: rgb(42,142,206);}")
        self.tableWidget.setModel(self.model)
        # 纵向表头不可见
        self.tableWidget.verticalHeader().setVisible(False)
        # 设置表格内容文字大小
        
        self.tableWidget.setFont(font)
        # 设置表格内容不可编辑
        self.tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)
        # 垂直滚动条始终开启
        self.tableWidget.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 804, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "12306查询"))
        MainWindow.setWindowIcon(QIcon('img/12306.png'))
        self.label.setText(_translate("MainWindow", "出发地："))
        self.label_2.setText(_translate("MainWindow", "目的地："))
        self.label_3.setText(_translate("MainWindow", "出发日期："))
        self.label_5.setText(_translate("MainWindow", "车次类型："))
        self.checkBox_G.setText(_translate("mainWindow", "G-高铁"))
        self.checkBox_D.setText(_translate("mainWindow", "D-动车"))
        self.checkBox_Z.setText(_translate("mainWindow", "Z-直达"))
        self.checkBox_T.setText(_translate("mainWindow", "T-特快"))
        self.checkBox_K.setText(_translate("mainWindow", "K-快车"))
        self.search.clicked.connect(self.on_click)
        self.replace.clicked.connect(self.replace_click)
        self.all.clicked.connect(self.all_click)
        self.checkBox_G.stateChanged.connect(self.change_G)  # 高铁选中与取消事件
        self.checkBox_D.stateChanged.connect(self.change_D)  # 动车选中与取消事件
        self.checkBox_Z.stateChanged.connect(self.change_Z)  # 直达车选中与取消事件
        self.checkBox_T.stateChanged.connect(self.change_T)  # 特快车选中与取消事件
        self.checkBox_K.stateChanged.connect(self.change_K)  # 快车选中与取消事件



    def replace_click(self):
        from_station = self.from_station.text()
        to_station = self.to_station.text()
        self.from_station.setText(to_station)
        self.to_station.setText(from_station)

    def all_click(self):
        L_chk=[self.checkBox_G,self.checkBox_D,self.checkBox_Z,self.checkBox_T,self.checkBox_K]
        allchecked=True
        for i in L_chk:
            if not i.isChecked():
                allchecked=False
                break
        if allchecked:
            for i in L_chk:
                i.setChecked(False)
        else:
            for i in L_chk:
                i.setChecked(True)

    str=''
    def on_click(self):
        from_station=self.from_station.text()
        to_station=self.to_station.text()
        date=self.date.text()
        week_day_dict = {
            0: '星期一', 1: '星期二',2: '星期三',3: '星期四',4: '星期五',5: '星期六',6: '星期天',
        }
        date_p = datetime.datetime.strptime(date, '%Y-%m-%d').date()
        week = datetime.datetime.strptime(date, "%Y-%m-%d").weekday()
        stations = eval(read())
        if from_station!="" and to_station!="" and date!="":
            if  from_station in stations and to_station in stations :
                data=query(from_station,to_station,date)
                if len(data) != 0:  # 判断返回的数据是否为空
                    # 如果不是空的数据就将车票信息显示在表格中
                    self.displayTable(len(data), 16, data)
                    self.str="{} --> {}（{}月{}日  {}）共计".format(from_station,to_station,date_p.month,date_p.day,week_day_dict[week])
                    self.label_4.setText( "{} --> {}（{}月{}日  {}）共计{}个车次".format(from_station,to_station,date_p.month,date_p.day,week_day_dict[week],len(data)))

    # 高铁复选框事件处理
    def change_G(self, state):
        # 选中将高铁信息添加到最后要显示的数据当中
        if state == QtCore.Qt.Checked:
            # 获取高铁信息
            g_vehicle()
            # 通过表格显示该车型数据
            self.displayTable(len(type_data), 16, type_data)

        else:
            # 取消选中状态将移除该数据
            r_g_vehicle()
            self.displayTable(len(type_data), 16, type_data)
        self.label_4.setText(self.str + "{}个车次".format(len(type_data)))


    # 动车复选框事件处理
    def change_D(self, state):
        # 选中将动车信息添加到最后要显示的数据当中
        if state == QtCore.Qt.Checked:
            # 获取动车信息
            d_vehicle()
            # 通过表格显示该车型数据
            self.displayTable(len(type_data), 16, type_data)

        else:
            # 取消选中状态将移除该数据
            r_d_vehicle()
            self.displayTable(len(type_data), 16, type_data)
        self.label_4.setText(self.str + "{}个车次".format(len(type_data)))

    # 直达复选框事件处理
    def change_Z(self, state):
        # 选中将直达车信息添加到最后要显示的数据当中
        if state == QtCore.Qt.Checked:
            # 获取直达车信息
            z_vehicle()
            self.displayTable(len(type_data), 16, type_data)
        else:
            # 取消选中状态将移除该数据
            r_z_vehicle()
            self.displayTable(len(type_data), 16, type_data)
        self.label_4.setText(self.str + "{}个车次".format(len(type_data)))

    # 特快复选框事件处理
    def change_T(self, state):
        # 选中将特快车信息添加到最后要显示的数据当中
        if state == QtCore.Qt.Checked:
            # 获取特快车信息
            t_vehicle()
            self.displayTable(len(type_data), 16, type_data)
        else:
            # 取消选中状态将移除该数据
            r_t_vehicle()
            self.displayTable(len(type_data), 16, type_data)
        self.label_4.setText(self.str + "{}个车次".format(len(type_data)))

    # 快速复选框事件处理
    def change_K(self, state):
        # 选中将快车信息添加到最后要显示的数据当中
        if state == QtCore.Qt.Checked:
            # 获取快速车信息
            k_vehicle()
            self.displayTable(len(type_data), 16, type_data)

        else:
            # 取消选中状态将移除该数据
            r_k_vehicle()
            self.displayTable(len(type_data), 16, type_data)
        self.label_4.setText(self.str + "{}个车次".format(len(type_data)))

    def displayTable(self, train, info, data):
        self.model.clear()
        head = ['车次', '出发站', '到达站', '出发时间', '到达时间', '历时', '商务座\n特等座', '一等座', '二等座', '高级软卧', '软卧', '动卧', '硬卧', '软座',
                '硬座', '无座']
        self.model.setHorizontalHeaderLabels(head)
        for row in range(train):
            for column in range(info):
                # 添加表格内容
                item = QStandardItem(data[row][column])
                # 向表格存储模式中添加表格具体信息
                self.model.setItem(row, column, item)
        # 设置表格存储数据的模式
        self.tableWidget.setModel(self.model)


def show_MainWindow():
    app = QtWidgets.QApplication(sys.argv)  # 实例化QApplication类，作为GUI主程序入口
    MainWindow = QtWidgets.QMainWindow()  # 实例化QtWidgets.QMainWindow类，创建自带menu的窗体类型QMainWindow
    ui = Ui_MainWindow()  # 实例化UI类
    ui.setupUi(MainWindow)  # 设置窗体UI
    MainWindow.show()  # 显示窗体
    sys.exit(app.exec_())

if __name__ == '__main__':
    show_MainWindow()